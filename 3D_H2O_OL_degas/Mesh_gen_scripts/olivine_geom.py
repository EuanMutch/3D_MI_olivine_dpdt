import numpy as np
import math as m

class olivine(object):
    
    
    def __init__(self, z):
        self.z = z # Length of z axis of olivine - the rest of the crystal will be scaled accordingly. 
        
        ol_x = 0.706 # Distance along x (a)
        ol_y = 0.46 # Distance along y (b)
        ol_z = 0.92 # Distance along z (c)
        
        self.sf = self.z/ol_z
        
        
        	# Create olivine points
    def faces(self):
        ol_p1 = np.array([0.7061357248994403*self.sf, -0.0000000165845153*self.sf, 0.6865771927157608*self.sf])
        ol_p2 = np.array([0.4187895557184330*self.sf, 0.4599999885112464*self.sf, 0.4469191173484135*self.sf])
        ol_p3 = np.array([0.6266660391977698*self.sf, 0.1704586163692148*self.sf, 0.7865511922113492*self.sf])
        ol_p4 = np.array([0.5645677927000951*self.sf, 0.3036563522524822*self.sf, 0.6303102254605011*self.sf])
        ol_p5 = np.array([0.5205871277453623*self.sf, 0.0566915522734537*self.sf, 0.9199999857404487*self.sf])

        ol_p6 = np.array([-0.7061357248994403*self.sf, -0.0000000161873903*self.sf, 0.6865771927157608*self.sf])
        ol_p7 = np.array([-0.4187895559771333*self.sf, 0.4599999887467703*self.sf, 0.4469191173484135*self.sf])
        ol_p8 = np.array([-0.6266660392936343*self.sf, 0.1704586167216467*self.sf, 0.7865511922113492*self.sf])
        ol_p9 = np.array([-0.5645677928708690*self.sf, 0.3036563525699906*self.sf, 0.6303102254605011*self.sf])
        ol_p10 = np.array([-0.5205871277772453*self.sf, 0.0566915525662277*self.sf, 0.9199999857404486*self.sf])

        ol_p11 = np.array([0.4187895559771333*self.sf, -0.4599999887467703*self.sf, 0.4469191173484134*self.sf])
        ol_p12 = np.array([0.6266660392936343*self.sf, -0.1704586167216468*self.sf, 0.7865511922113491*self.sf])
        ol_p13 = np.array([0.5645677928708690*self.sf, -0.3036563525699906*self.sf, 0.6303102254605010*self.sf])
        ol_p14 = np.array([0.5205871277772451*self.sf, -0.0566915525662277*self.sf, 0.9199999857404487*self.sf])

        ol_p15 = np.array([-0.4187895557184330*self.sf, -0.4599999885112465*self.sf, 0.4469191173484135*self.sf])
        ol_p16 = np.array([-0.6266660391977699*self.sf, -0.1704586163692148*self.sf, 0.7865511922113491*self.sf])
        ol_p17 = np.array([-0.5645677927000951*self.sf, -0.3036563522524822*self.sf, 0.6303102254605010*self.sf])
        ol_p18 = np.array([-0.5205871277453623*self.sf, -0.0566915522734537*self.sf, 0.9199999857404486*self.sf])

        ol_p19 = np.array([0.7061357248994403*self.sf, -0.0000000165845154*self.sf, -0.6865771927157607*self.sf])
        ol_p20 = np.array([0.4187895557184330*self.sf, 0.4599999885112465*self.sf, -0.4469191173484135*self.sf])
        ol_p21 = np.array([0.6266660391977699*self.sf, 0.1704586163692148*self.sf, -0.7865511922113491*self.sf])
        ol_p22 = np.array([0.5645677927000951*self.sf, 0.3036563522524822*self.sf, -0.6303102254605010*self.sf])
        ol_p23 = np.array([0.5205871277453623*self.sf, 0.0566915522734537*self.sf, -0.9199999857404486*self.sf])

        ol_p24 = np.array([-0.7061357248994404*self.sf, -0.0000000161873904*self.sf, -0.6865771927157607*self.sf])
        ol_p25 = np.array([-0.4187895559771333*self.sf, 0.4599999887467703*self.sf, -0.4469191173484134*self.sf])
        ol_p26 = np.array([-0.6266660392936343*self.sf, 0.1704586167216468*self.sf, -0.7865511922113491*self.sf])
        ol_p27 = np.array([-0.5645677928708690*self.sf, 0.3036563525699906*self.sf, -0.6303102254605010*self.sf])
        ol_p28 = np.array([-0.5205871277772451*self.sf, 0.0566915525662277*self.sf, -0.9199999857404487*self.sf])

        ol_p29 = np.array([0.4187895559771333*self.sf, -0.4599999887467703*self.sf, -0.4469191173484135*self.sf])
        ol_p30 = np.array([0.6266660392936343*self.sf, -0.1704586167216467*self.sf, -0.7865511922113492*self.sf])
        ol_p31 = np.array([0.5645677928708690*self.sf, -0.3036563525699906*self.sf, -0.6303102254605011*self.sf])
        ol_p32 = np.array([0.5205871277772453*self.sf, -0.0566915525662277*self.sf, -0.9199999857404486*self.sf])

        ol_p33 = np.array([-0.4187895557184330*self.sf, -0.4599999885112464*self.sf, -0.4469191173484135*self.sf])
        ol_p34 = np.array([-0.6266660391977698*self.sf, -0.1704586163692148*self.sf, -0.7865511922113492*self.sf])
        ol_p35 = np.array([-0.5645677927000951*self.sf, -0.3036563522524822*self.sf, -0.6303102254605011*self.sf])
        ol_p36 = np.array([-0.5205871277453623*self.sf, -0.0566915522734537*self.sf, -0.9199999857404487*self.sf])
        
        #return [ol_p1, ol_p2, ol_p3, ol_p4, ol_p5, ol_p6, ol_p7, ol_p8, ol_p9, ol_p10, ol_p11, ol_p12, ol_p13, ol_p14, ol_p15, ol_p16, ol_p17, ol_p18, ol_p19, ol_p20, ol_p21, ol_p22, ol_p23, ol_p24, ol_p25, ol_p26, ol_p27, ol_p28, ol_p29, ol_p30, ol_p31, ol_p32, ol_p33, ol_p34, ol_p35, ol_p36]
        
        ol_l1 = np.vstack((ol_p1, ol_p3))
        ol_l2 = np.vstack((ol_p1, ol_p12))
        ol_l3 = np.vstack((ol_p1, ol_p19))
        ol_l4 = np.vstack((ol_p2, ol_p4))
        ol_l5 = np.vstack((ol_p2, ol_p7))
        ol_l6 = np.vstack((ol_p2, ol_p20))
        ol_l7 = np.vstack((ol_p3, ol_p4))
        ol_l8 = np.vstack((ol_p3, ol_p5))
        ol_l9 = np.vstack((ol_p4, ol_p22))
        ol_l10 = np.vstack((ol_p5, ol_p10))
        ol_l11 = np.vstack((ol_p5, ol_p14))
        ol_l12 = np.vstack((ol_p6, ol_p8))
        ol_l13 = np.vstack((ol_p6, ol_p16))
        ol_l14 = np.vstack((ol_p6, ol_p24))
        ol_l15 = np.vstack((ol_p7, ol_p9))
        ol_l16 = np.vstack((ol_p7, ol_p25))
        ol_l17 = np.vstack((ol_p8, ol_p9))
        ol_l18 = np.vstack((ol_p8, ol_p10))
        ol_l19 = np.vstack((ol_p9, ol_p27))
        ol_l20 = np.vstack((ol_p10, ol_p18))
        ol_l21 = np.vstack((ol_p11, ol_p13))
        ol_l22 = np.vstack((ol_p11, ol_p15))
        ol_l23 = np.vstack((ol_p11, ol_p29))
        ol_l24 = np.vstack((ol_p12, ol_p13))
        ol_l25 = np.vstack((ol_p12, ol_p14))
        ol_l26 = np.vstack((ol_p13, ol_p31))
        ol_l27 = np.vstack((ol_p14, ol_p18))
        ol_l28 = np.vstack((ol_p15, ol_p17))
        ol_l29 = np.vstack((ol_p15, ol_p33))
        ol_l30 = np.vstack((ol_p16, ol_p17))
        ol_l31 = np.vstack((ol_p16, ol_p18))
        ol_l32 = np.vstack((ol_p17, ol_p35))
        ol_l33 = np.vstack((ol_p19, ol_p21))
        ol_l34 = np.vstack((ol_p19, ol_p30))
        ol_l35 = np.vstack((ol_p20, ol_p22))
        ol_l36 = np.vstack((ol_p20, ol_p25))
        ol_l37 = np.vstack((ol_p21, ol_p22))
        ol_l38 = np.vstack((ol_p21, ol_p23))
        ol_l39 = np.vstack((ol_p23, ol_p28))
        ol_l40 = np.vstack((ol_p23, ol_p32))
        ol_l41 = np.vstack((ol_p24, ol_p26))
        ol_l42 = np.vstack((ol_p24, ol_p34))
        ol_l43 = np.vstack((ol_p25, ol_p27))
        ol_l44 = np.vstack((ol_p26, ol_p27))
        ol_l45 = np.vstack((ol_p26, ol_p28))
        ol_l46 = np.vstack((ol_p28, ol_p36))
        ol_l47 = np.vstack((ol_p29, ol_p31))
        ol_l48 = np.vstack((ol_p29, ol_p33))
        ol_l49 = np.vstack((ol_p30, ol_p31))
        ol_l50 = np.vstack((ol_p30, ol_p32))
        ol_l51 = np.vstack((ol_p32, ol_p36))
        ol_l52 = np.vstack((ol_p33, ol_p35))
        ol_l53 = np.vstack((ol_p34, ol_p35))
        ol_l54 = np.vstack((ol_p34, ol_p36))
        
        ol_f1 = np.concatenate((ol_l45, ol_l46, ol_l54, ol_l42, ol_l41))
        ol_f2 = np.concatenate((ol_l19, ol_l44, ol_l41, ol_l14, ol_l12, ol_l17))
        ol_f3 = np.concatenate((ol_l42, ol_l53, ol_l32, ol_l30, ol_l13, ol_l14))
        ol_f4 = np.concatenate((ol_l52, ol_l32, ol_l28, ol_l29))
        ol_f5 = np.concatenate((ol_l43, ol_l19, ol_l15, ol_l16))
        ol_f6 = np.concatenate((ol_l13, ol_l31, ol_l20, ol_l18, ol_l12))
        ol_f7 = np.concatenate((ol_l39, ol_l46, ol_l51, ol_l40))
        ol_f8 = np.concatenate((ol_l39, ol_l45, ol_l44, ol_l43, ol_l36, ol_l35, ol_l37, ol_l38))
        ol_f9 = np.concatenate((ol_l51, ol_l54, ol_l53, ol_l52, ol_l48, ol_l47, ol_l49, ol_l50))
        ol_f10 = np.concatenate((ol_l40, ol_l50, ol_l34, ol_l33, ol_l38))
        ol_f11 = np.concatenate((ol_l49, ol_l26, ol_l24, ol_l2, ol_l3, ol_l34))
        ol_f12 = np.concatenate((ol_l33, ol_l37, ol_l9, ol_l7, ol_l1, ol_l3))
        ol_f13 = np.concatenate((ol_l26, ol_l47, ol_l23, ol_l21))
        ol_f14 = np.concatenate((ol_l35, ol_l9, ol_l4, ol_l6))
        ol_f15 = np.concatenate((ol_l1, ol_l8, ol_l11, ol_l25, ol_l2))
        ol_f16 = np.concatenate((ol_l11, ol_l27, ol_l20, ol_l10))
        ol_f17 = np.concatenate((ol_l30, ol_l28, ol_l22, ol_l21, ol_l24, ol_l25, ol_l27, ol_l31))
        ol_f18 = np.concatenate((ol_l8, ol_l10, ol_l18, ol_l17, ol_l15, ol_l5, ol_l4, ol_l7))
        ol_f19 = np.concatenate((ol_l29, ol_l48, ol_l23, ol_l22))
        ol_f20 = np.concatenate((ol_l16, ol_l36, ol_l6, ol_l5))

        #fc11 = np.unique(ol_f11, axis=0)
        #fc12 = np.unique(ol_f12, axis=0)
        #fc14 = np.unique(ol_f14, axis=0)
        #fc15 = np.unique(ol_f15, axis=0)
        #fc16 = np.unique(ol_f16, axis=0)
        #fc18 = np.unique(ol_f18, axis=0)
        #fc20 = np.unique(ol_f20, axis=0)

        #[fc12, fc14, fc15, fc16, fc18, fc20]

        fc1 = np.unique(ol_f1, axis=0)
        fc2 = np.unique(ol_f2, axis=0)
        fc3 = np.unique(ol_f3, axis=0)
        fc4 = np.unique(ol_f4, axis=0)
        fc5 = np.unique(ol_f5, axis=0)
        fc6 = np.unique(ol_f6, axis=0)
        fc7 = np.unique(ol_f7, axis=0)
        fc8 = np.unique(ol_f8, axis=0)
        fc9 = np.unique(ol_f9, axis=0)
        fc10 = np.unique(ol_f10, axis=0)
        fc11 = np.unique(ol_f11, axis=0)
        fc12 = np.unique(ol_f12, axis=0)
        fc13 = np.unique(ol_f13, axis=0)
        fc14 = np.unique(ol_f14, axis=0)
        fc15 = np.unique(ol_f15, axis=0)
        fc16 = np.unique(ol_f16, axis=0)
        fc17 = np.unique(ol_f17, axis=0)
        fc18 = np.unique(ol_f18, axis=0)
        fc19 = np.unique(ol_f19, axis=0)
        fc20 = np.unique(ol_f20, axis=0)

        return [fc1, fc2, fc3, fc4, fc5, fc5, fc6, fc7, fc8, fc9, fc10, fc11, fc12, fc13, fc14, fc15, fc16, fc17, fc18, fc19, fc20]  


        #ol_ll1 = np.concatenate((ol_l45, ol_l46, -ol_l54, -ol_l42, ol_l41))
        #ol_ll2 = np.concatenate((ol_l19, -ol_l44, -ol_l41, -ol_l14, ol_l12, ol_l17))
        #ol_ll3 = np.concatenate((ol_l42, ol_l53, -ol_l32, -ol_l30, -ol_l13, ol_l14))
        #ol_ll4 = np.concatenate((ol_l52, -ol_l32, -ol_l28, ol_l29))
        #ol_ll5 = np.concatenate((ol_l43, -ol_l19, -ol_l15, ol_l16))
        #ol_ll6 = np.concatenate((ol_l13, ol_l31, -ol_l20, -ol_l18, -ol_l12))
        #ol_ll7 = np.concatenate((ol_l39, ol_l46, -ol_l51, -ol_l40))
        #ol_ll8 = np.concatenate((ol_l39, -ol_l45, ol_l44, -ol_l43, -ol_l36, ol_l35, -ol_l37, ol_l38))
        #ol_ll9 = np.concatenate((ol_l51, -ol_l54, ol_l53, -ol_l52, -ol_l48, ol_l47, -ol_l49, ol_l50))
        #ol_ll10 = np.concatenate((ol_l40, -ol_l50, -ol_l34, ol_l33, ol_l38))
        #ol_ll11 = np.concatenate((ol_l49, -ol_l26, -ol_l24, -ol_l2, ol_l3, ol_l34))
        #ol_ll12 = np.concatenate((ol_l33, ol_l37, -ol_l9, -ol_l7, -ol_l1, ol_l3))
        #ol_ll13 = np.concatenate((ol_l26, -ol_l47, -ol_l23, ol_l21))
        #ol_ll14 = np.concatenate((ol_l35, -ol_l9, -ol_l4, ol_l6))
        #ol_ll15 = np.concatenate((ol_l1, ol_l8, ol_l11, -ol_l25, -ol_l2))
        #ol_ll16 = np.concatenate((ol_l11, ol_l27, -ol_l20, -ol_l10))
        #ol_ll17 = np.concatenate((ol_l30, -ol_l28, -ol_l22, ol_l21, -ol_l24, ol_l25, ol_l27, -ol_l31))
        #ol_ll18 = np.concatenate((ol_l8, ol_l10, -ol_l18, ol_l17, -ol_l15, -ol_l5, ol_l4, -ol_l7))
        #ol_ll19 = np.concatenate((ol_l29, -ol_l48, -ol_l23, ol_l22))
        #ol_ll20 = np.concatenate((ol_l16, -ol_l36, -ol_l6, ol_l5])

        #[ol_f1, ol_f2, ol_f3, ol_f4, ol_f5, ol_f6, ol_f7, ol_f8, ol_f9, ol_f10, ol_f11, ol_f12, ol_f13, ol_f14, ol_f15, ol_f16, ol_f17, ol_f18, ol_f19, ol_f20]

